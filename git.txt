# git

local : working directory -> staging area -> repository
다른이름 : workspace -> index -> repo


remote repository : github



git fetch : remote repository -> remote-tracking branch

git merge : remote-tracking branch -> local branch(working directory 까지)

git pull : git fetch + git merge




to see workspace vs repo:  git diff HEAD
to see index vs repos: git diff --cached
to see workspace vs index:  git diff




*  어떤 함수가 추가되거나 제거된 커밋만을 찾아보려면
git log --Sfunction_name

* 파일이 변경된 log의 결과를 검색
git log -- path1 path2

# 'HEAD’라는 특수한 포인터가 있다. 이 포인터는 지금 작업하는 로컬 브랜치

# origin의 의미
브랜치 이름으로 많이 사용하는 ‘`master’라는 이름이 괜히 특별한 의미를 가지는 게 아닌 것처럼 ‘`origin'도 특별한 의미가 있는 것은 아니다.
git init 명령이 자동으로 만들기 때문에 사용하는 이름인 ``master’와 마찬가지로 ``origin'도 git clone 명령이 자동으로 만들어주는 리모트 이름이다.
git clone -o booyah 라고 옵션을 주고 명령을 실행하면 booyah/master 라고 사용자가 정한 대로 리모트 이름을 생성해준다.


# 리모트 트래킹 브랜치는 리모트 브랜치를 추적하는 브랜치다. 이 브랜치는 로컬에 있지만 움직일 수 없다.
리모트 서버에 연결할 때마다 리모트 브랜치에 따라서 자동으로 움직일 뿐이다.
리모트 트래킹 브랜치는 일종의 북마크라고 할 수 있다. 리모트 저장소에 마지막으로 연결했던 순간에 브랜치가 무슨 커밋을 가리키고 있었는지를 나타낸다.

# 리모트 트래킹 브랜치를 로컬 브랜치로 Checkout 하면 자동으로 “트래킹(Tracking) 브랜치''가 만들어진다 (트래킹 하는 대상 브랜치를 ``Upstream 브랜치” 라고 부른다).
트래킹 브랜치는 리모트 브랜치와 직접적인 연결고리가 있는 로컬 브랜치이다.
트래킹 브랜치에서 git pull 명령을 내리면 리모트 저장소로부터 데이터를 내려받아 연결된 리모트 브랜치와 자동으로 Merge 한다.

# git checkout -b iss53
git branch iss53 + git checkout iss53

# git log --pretty=format:"%h %s" --graph

# git push origin fix1
remote fix1 branch 생성 및 push


# git ls-remote [remote] 명령으로 모든 리모트 Refs를 조회할 수 있다.
git remote show [remote] 명령은 모든 리모트 브랜치와 그 정보를 보여준다. 리모트 Refs가 있지만 보통은 리모트 트래킹 브랜치를 사용한다.


# git ls-remote
a6072d0b9fd25c313d01e5524c720a655760242e        HEAD
aab097f875ffbffbe8a5214ba58808e020e1bf70        refs/heads/fix1
5c393e26a2092749222615bdafdaefbb736a2509        refs/heads/fix2
a6072d0b9fd25c313d01e5524c720a655760242e        refs/heads/master

# git remote show origin

* remote origin
  Fetch URL: https://github.com/jmpark1029/test.git
  Push  URL: https://github.com/jmpark1029/test.git
  HEAD branch: master
  Remote branches:
    fix1   tracked
    master tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local refs configured for 'git push':
    fix1   pushes to fix1   (up to date)
    master pushes to master (fast-forwardable)
	
# git checkout fix1

Switched to a new branch 'fix1'
Branch fix1 set up to track remote branch fix1 from origin.

# remote 에 새로 생긴 branch checkout 방법 (fix1 branch)
git checkout fix1

# git fetch 명령은 리모트 브랜치 정보를 업데이트
리모트에 새로운 브랜치가 생성되었어도 로컬 저장소에 브랜치를 생성하지는 않는다.
브랜치 포인터만 생성된다.

# git fetch 명령은 리모트 저장소의 데이터를 모두 로컬로 가져오지만, 자동으로 Merge 하지 않는다. 그래서 당신이 로컬에서 하던 작업을 정리하고 나서 수동으로 Merge 해야 한다.

# git pull 명령으로 리모트 저장소 브랜치에서 데이터를 가져올 뿐만 아니라 자동으로 로컬 브랜치와 Merge 시킬 수 있다

# 로컬에 존재하는 브랜치가 리모트의 특정 브랜치를 추적하게 하려면 git branch 명령에 -u 나 --set-upstream-to 옵션을 붙여서 아래와 같이 설정한다.

# git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin

# git branch -vv
* fix1   c251def [origin/fix1: ahead 1] test2 modify
  master 57d8194 [origin/master] test.txt add, README.md modify

# 리모트에 접근할 때마다 매번 사용자이름나 암호를 입력하지 않도록 “credential cache” 기능을 이용할 수 있다.
이 기능을 활성화하면 Git은 몇 분 동안 입력한 사용자이름이나 암호를 저장해둔다. 
기능을 활성화하려면 git config --global credential.helper cache 명령을 실행하여 환경설정을 추가한다.

# 로컬 추적 브랜치가 리모트 브랜치와의 차이를 볼려면
git fetch
git branch -vv

또는

git branch -v
* fix1   c251def test2 modify
  fix2   5c393e2 fix2.txt add
  master 57d8194 test.txt add, README.md modify

git ls-remote
From https://github.com/jmpark1029/test.git
57d819419b4fbabf283d8cf0ee8f675794d16c1f        HEAD
c9315b796a7c5726e79a93eab13352af3d3c011c        refs/heads/fix1
5c393e26a2092749222615bdafdaefbb736a2509        refs/heads/fix2
57d819419b4fbabf283d8cf0ee8f675794d16c1f        refs/heads/master

위와 같이 fix1의 체크섬이 다른 것을 확인 할 수 있다.